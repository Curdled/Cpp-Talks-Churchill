Safe Modern C++

C++ was developed over 30 years ago and has undergone many changes and five standardizations over that time.
Safety is important in all disciplines of computer science; primarily in safety critical systems in which memory or
resource errors are catastrophic.
This talk will focus on two of the most recent standards (C++11, C++14) which
have seen big changes in C++ best practice; changes which focus on a safer language,
but without the overhead of other 'safe' languages.
The important topics covered are type safety and memory safety.
It is apparent that some progress has been made on the idea of safety and
consistency and I will discuss the impact of individual changes in this respect.
There are some standard rule covered in this talk that, if followed, will
solve common programming errors.
